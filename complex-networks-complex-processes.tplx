((= LaTeX template for "Complex networks, complex processes"
Designed to generate chapters for the book, to be put together
using a custom LaTeX harness file.

Derived from base.tplx and style_bw_ipython.tplx
Copyright (c) 2014, Simon Dobson <simon.dobson@computer.org>
=))

((*- extends 'display_priority.tplx' -*))

%===============================================================================
% Abstract overrides
%===============================================================================

((* block header *))
    ((* block docclass *))((* endblock docclass *))
    
    ((* block packages *))((* endblock packages *))

    ((* block definitions *))((* endblock definitions *))

    ((* block commands *))((* endblock commands *))
((* endblock header *))

((* block body *))
    ((( super() )))
((* endblock body *))

%===============================================================================
% Support blocks
%===============================================================================

% Displaying simple data text
((* block data_text *))
    \begin{verbatim}
((( output.text )))
    \end{verbatim}
((* endblock data_text *))

% Display python error text as-is
((* block pyerr *))
    \begin{Verbatim}[commandchars=\\\{\}]
((( super() )))
    \end{Verbatim}
((* endblock pyerr *))
((* block traceback_line *))
    ((( line | indent | strip_ansi | escape_latex )))
((* endblock traceback_line *))

% Display stream ouput with coloring
((* block stream *))
    \begin{Verbatim}[commandchars=\\\{\}]
((( output.text | escape_latex | ansi2latex )))
    \end{Verbatim}
((* endblock stream *))

% Display latex
((* block data_latex -*))
    ((*- if output.latex.startswith('$'): -*)) 
        ((= Replace $ symbols with more explicit, equation block. =))
        \begin{equation*}
        ((( output.latex | strip_dollars )))
        \end{equation*}
    ((*- else -*))
        ((( output.latex )))
    ((*- endif *))
((* endblock data_latex *))

% Default mechanism for rendering figures
((*- block data_png -*))((( draw_figure(output.png_filename) )))((*- endblock -*))
((*- block data_jpg -*))((( draw_figure(output.jpeg_filename) )))((*- endblock -*))
((*- block data_svg -*))((( draw_figure(output.svg_filename) )))((*- endblock -*))
((*- block data_pdf -*))((( draw_figure(output['application/pdf_filename']) )))((*- endblock -*))

% Draw a figure using the graphicx package.
((* macro draw_figure(filename) -*))
((* set filename = filename | posix_path *))
((*- block figure scoped -*))
    \begin{center}
    \adjustimage{max size={0.9\linewidth}{0.9\paperheight}}{((( filename )))}
    \end{center}
    { \hspace*{\fill} \\}
((*- endblock figure -*))
((*- endmacro *))

% Draw heading cell.  Explicitly map different cell levels.
((* block headingcell scoped *))

    ((* if cell.level == 1 -*))
        ((* block h1 -*))\chapter((* endblock h1 -*))
    ((* elif cell.level == 2 -*))
        ((* block h2 -*))\section((* endblock h2 -*))
    ((* elif cell.level == 3 -*))
        ((* block h3 -*))\subsection((* endblock h3 -*))
    ((* elif cell.level == 4 -*))
        ((* block h4 -*))\subsubsection((* endblock h4 -*))
    ((* elif cell.level == 5 -*))
        ((* block h5 -*))\paragraph((* endblock h5 -*))
    ((* elif cell.level == 6 -*))
        ((* block h6 -*))\\*\textit((* endblock h6 -*))
    ((*- endif -*))
    {((( cell.source | replace('\n', ' ') | citation2latex | strip_files_prefix | markdown2latex )))}

((* endblock headingcell *))


% Render markdown
((* block markdowncell scoped *))
    ((( cell.source | citation2latex | strip_files_prefix | markdown2latex )))
((* endblock markdowncell *))

% Don't display unknown types
((* block unknowncell scoped *))
((* endblock unknowncell *))


%===============================================================================
% Input
%===============================================================================

((* block input scoped *))
((( add_prompt(cell.input, cell, 'In ') )))
((* endblock input *))


%===============================================================================
% Output
%===============================================================================

((* block pyout scoped *))
    ((*- for type in output | filter_data_type -*))
        ((*- if type in ['text']*))
((( add_prompt(output.text, cell, 'Out') )))
        ((*- else -*))
\verb+Out[((( cell.prompt_number )))]:+((( super() )))
        ((*- endif -*))
    ((*- endfor -*))
((* endblock pyout *))


%==============================================================================
% Support Macros
%==============================================================================

% Name: draw_prompt
% Purpose: Renders an output/input prompt
((* macro add_prompt(text, cell, prompt) -*))
    ((*- set prompt_number = "" ~ cell.prompt_number -*))
    ((*- set indentation = " " * (prompt_number | length + 7) -*))
\begin{verbatim}
(((- text | add_prompts(first=prompt ~ '[' ~ prompt_number ~ ']: ', cont=indentation) -)))
\end{verbatim}
((*- endmacro *))
