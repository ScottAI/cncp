Installing a compute server onto bare metal
===========================================

By "bare metal" we mean running compute servers on a login to a real
machine. Actually the "real" machine may in fact be virtual, ut the
point is that it's a machine to which you have a login already, as
opposed to a virtual machine you're creating. (If you want to create a
VM from scratch, you need to use the code in the vm/compute
directory.)


Provisioning the machine
------------------------

The baremetal.sh script is intended to get the provisioning system up
and running, using the same set of chef recipes we use for VMs. To get
things working:

- Copy baremetal.sh to your home directory on the machine you want to
  provision
- Run the script using bash ./baremetal.sh

That should be it. The script will clone a minimal version of the git
repo containing only the provisioning code, and then use this to
populate a Python virtual environment and spin-up some compute
servers.


Accessing the compute servers
-----------------------------

The provisioning process creates an IPython profile called
'profile_cncp' by default, with an ipcontroller process and multiple
ipengine processes running inside it. To connect to the controller you
need the security keys.

If you're running an IPython client from the bare-metal machine,
you're good to go by accessing the profile_cncp profile.

If you're running an IPython client from another machine -- for
example a laptop or workstation other than the newly-provisioned
compute server -- then you need to copy the keys. You can do this as
follows:

- Create a profile using ipython profile create cncp --parallel
- Copy the file:
 <compute-server-machine-home-directory>/.ipython/profile_cncp/security/ipcontroller-client.json
 to a local file
 ~/.ipython/profile_cncp/security/ipcontroller-client.json
- (What this does is install persistent security information needed
  for a local client to connect to the remote ipcontroller)

A local IPython client should now be able to connect by accessing the
profile_cncp profile.
